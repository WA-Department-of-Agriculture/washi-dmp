# Code style guide {#sec-code-style-guide}

This style guide is an adaptation of the [*tidyverse style
guide*](https://style.tidyverse.org/) [@wickham2022] and includes best
practices from [*R for Data Science (2e)*](https://r4ds.hadley.nz/)
(*R4DS*) [@wickham2023], [*Data Management in Large-Scale Education
Research*](https://datamgmtinedresearch.com/style.html?q=farewell#style)
[@lewis2023], and other resources. **All WaSHI staff who code in R
should thoroughly read and consistently implement this style guide.**
Using consistent project structures, naming conventions, script
structures, and code style will improve code readability, analysis
reproducibility, and ease of collaboration.

> Good coding style is like correct punctuation: you can manage
> without it, butitsuremakesthingseasiertoread. This site describes
> the style used throughout the [tidyverse](http://tidyverse.org/). It
> was derived from Google's original R Style Guide - but Google's
> [current guide](https://google.github.io/styleguide/Rguide.html) is
> derived from the tidyverse style guide.
>
> All style guides are fundamentally opinionated. Some decisions
> genuinely do make code easier to use (especially matching indenting
> to programming structure), but many decisions are arbitrary. The
> most important thing about a style guide is that it provides
> consistency, making code easier to write because you need to make
> fewer decisions.
>
> \- Hadley Wickham in the [tidyverse style
> guide](https://style.tidyverse.org/)

## Projects

All files associated with a given project (input data, R scripts,
analytical results, figures, reports) should be kept together in one
directory. RStudio has built-in support for this through **projects**.
R projects bundle all the work in a portable, self-contained folder
that can be moved around on your computer or on to other
collaborators' computers and still work.

Learn more about projects in the [Workflow: scripts and projects
chapter of
*R4DS*](https://r4ds.hadley.nz/workflow-scripts.html#projects)
[@wickham2023], in Jenny Bryan's article [*Project-oriented
workflow*](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/)
[@bryan2017], and Shannon Pileggi's [workshop
slides](https://www.pipinghotdata.com/talks/2023-09-11-project-oriented-workflows/)
[@pileggi2023].

To create a project in RStudio, click `File` \> `New Project`, then
follow the steps in the below figure.

![Figure from Chapter 6 of
*R4DS*](https://r4ds.hadley.nz/diagrams/new-project.png){fig-alt="Three screenshots of the New Project menu. In the first screenshot, the Create Project window is shown and New Directory is selected. In the second screenshot, the Project Type window is shown and Empty Project is selected. In the third screenshot, the Create New Project  window is shown and the directory name is given as r4ds and the project is being created as subdirectory of the Desktop. Figure from Chapter 6 of R4DS."}

The project folder should be checked into GitHub for version control
as discussed in @sec-version-control.

If not checked into GitHub, at bare minimum, the folder should be
copied onto the shared drive.

### Project folder structure {#sec-project-folder-structure}

Having a consistent and logical folder structure will make it easier
for you (and future you) and collaborators to make sense of the files
and work you've done. Well documented projects also make it easier to
resume a project after some time away with minimal frustration of
having to remember where everything is, what you did, and why you did
it.

The below structure works most of the time and should be used as a
starting point. However, different projects have different needs, so
add and remove subfolders as needed.

-   **root**: top-level project folder containing the `.Rproj` file.

-   **data**: contains raw and processed data files in subfolders. Raw
    data should be made *read-only* and not changed in any way.

-   **output**: outputs from R scripts such as figures or tables.

-   **R**: all R scripts containing data processing or function
    definitions.

-   **reports**: Quarto or RMarkdown files are saved here, as well as
    the resulting reports.

-   **README**: a markdown file (can be generated from Quarto or
    RMarkdown) to explain the project.

<details>

<summary>See an example project folder structure</summary>

```         
├── project-demo.Rproj
├── data
│   ├── processed
│   │   └── data-clean.csv
│   └── raw
│       └── data-raw.xlsx
├── output
│   ├── fig-01.png
│   ├── fig-02.png
│   ├── tbl-01.png
│   └── tbl-02.png
├── R
│   ├── 01_import.R
│   ├── 02_tidy.R
│   ├── 03_transform.R
│   ├── 04_visualize.R
│   └── custom-functions.R
└── reports
│   ├── soil-health-report.pdf
│   └── soil-health-report.qmd
│   └── images
│       └── logo.png
├── README.md
└── README.qmd
```

</details>

R packages may contain these additional subfolders and files:

-   **inst**: any arbitrary additional files to be included in package
    installation such as `CITATION`, fonts, and Quarto templates.

-   **man**: all `.Rd` ("R documentation") files for each function
    that are generated from [{roxygen2}](https://roxygen2.r-lib.org/).

-   **vignettes**: long-form guides that go beyond function
    documentation and can be used as tutorials to demonstrate a
    workflow using the package to solve a particular problem.

-   **tests**: all tests, usually using
    [{testthat}](https://testthat.r-lib.org/).

-   **pkgdown** and **docs**: if using
    [{pkgdown}](https://pkgdown.r-lib.org/) to build a website for the
    package, you may have a pkgdown folder containing the favicon and
    any additional css and a docs folder containing the website source
    files.

-   **DESCRIPTION**: file containing metadata about the package
    (authors, current version, dependencies).

-   **LICENSE**: file describing the package usage agreement.

-   **NAMESPACE**: file generated by
    [{roxygen2}](https://roxygen2.r-lib.org/) listing functions
    imported from other packages.

-   **NEWS.md**: file documenting user-facing changes to a package.

Learn more about other R package components in [*R Packages
(2e)*](https://r-pkgs.org/) [@wickham2023a].

### Absolute vs relative paths

Note: directories are synonymous with folders.

❌Absolute paths start with the root directory and provide the full
path to a specific file or folder like
`C:\\Users\\jryan\\Documents\\R\\projects\\project-demo\\data\\processed`.[^code-guide-1]
You can run `getwd()` to find out where the current working directory
is and `setwd()` to set a specific folder as your working directory.
However, **please don't do use `setwd()`** because this absolute file
path is going to break your code if you reorganize your folders and is
not going to work on any collaborators' computers as their directory
configuration will be different.

[^code-guide-1]: Note the two backslashes. Windows paths use
    backslashes, which mean something specific in R. to get a single
    backslash in the path, we need to type two backslashes (or use
    forward slashes).

![A cartoon of a cracked glass cube looking frustrated with casts on
its arm and leg, with bandaids on it, containing "setwd", looks on at
a metal riveted cube labeled "R Proj" holding a skateboard looking
sympathetic, and a smaller cube with a helmet on labeled "here" doing
a trick on a skateboard. Artwork by
[\@allison_horst](https://twitter.com/allison_horst).](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/e684ee45-98fc-469e-997c-e2d68b0096cd_rw_1920.png?h=d754f634e6fc1e292430124fbe44dad7)

✅Instead, always use relative paths in your scripts. Relative paths
are *relative* to the working directory (i.e. the project's home) like
`data/processed/data-clean.csv`. When working in a RStudio project,
the default working directory is always the **root** project directory
(where the `.Rproj` file is).

For example, say `01-import.R` contains the code
`read.csv("data/processed/data-clean.csv")`. This will read the file
from
`C:\\Users\\jryan\\Documents\\R\\projects\\project-demo\\data\\processed\\data-clean.csv"`.
The magic of relative paths means that if Dani were have this project
on her desktop and run this code, it would read the file from
`C:\\Users\\dgelardi\\Desktop\\project-demo\\data\\processed\\data-clean.csv"`.
This is why relative paths are so important -- they work no matter
where the project folder is!

### {here} package

In combination with R projects, use the
[{here}](https://here.r-lib.org/) package to build relative file
paths. This is especially important in Quarto files because when the
`.qmd` file renders, its default current working directory is wherever
the `.qmd` file lives. If we are using the above example project
structure and wanted to read in our clean data to our
`soil-health-report.qmd` file, we would get an error running
`read.csv("data/processed/data-clean.csv")` because it would be
looking for a data subfolder in the reports folder. Instead, we can
use the {here} package to build a relative path from our root with
`read.csv(here::here("data", "processed", "data-clean.csv"))`. {here}
takes care of the backslashes or forward slashes so the relative path
will work no matter the operating system.

![A cartoon showing two paths side-by-side. On the left is a scary
spooky forest, with spiderwebs and gnarled trees, with file paths
written on the branches like "\~/mmm/nope.csv" and
"setwd("/haha/good/luck/"), with a scared looking cute fuzzy monster
running out of it. On the right is a bright, colorful path with
flowers, rainbow and sunshine, with signs saying"here!" and "it's all
right here!" A monster facing away from us in a backpack and walking
stick is looking toward the right path. Stylized text reads "here:
find your path." Learn more about [here](https://here.r-lib.org/).
Artwork by
[\@allison_horst](https://twitter.com/allison_horst).](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/57457fc3-1d2d-4a3b-a9b7-f0b62e418cd5_rw_1920.png?h=e0721f766fc8f031edeb67f7f8024595)

## Naming conventions

> "There are only two hard things in Computer Science: cache
> invalidation and naming things."
>
> --- Phil Karlton

Based on this quote, Indrajeet Patil developed
[slides](https://indrajeetpatil.github.io/second-hardest-cs-thing/)
with a lot of detailed advice on naming things in computer science
(completely language-agnostic).

R code specific naming conventions are listed below. They mostly
follow the best practices from @sec-naming-best-practices in the
naming conventions chapter still apply, with one exception as seen in
@sec-variables-in-a-dataset.

TODO: add Python naming conventions (they differ from R as static
variables aka constants are supposed to be SCREAMING_SNAKE_CASE).

### Project folder and GitHub repository

The project folder and GitHub repository name should be the same. Be
concise and descriptive. Use kebab-case.

**Example**: `washi-dmp`, `soils`.

### Files

Be concise and descriptive. Avoid using special characters. Use
kebab-case with underscores to separate different metadata groups
(date_good-name).

**Examples**: `2024_producer-report.qmd`, `tables.R`,
`create-soils.R`.

If files should be run in a particular order, prefix them with
numbers. Left pad with zero if there may be more than 10 files.

**Example**:

```         
01_import.R
02_tidy.R
03_transform.R
04_visualize.R
```

### Variables, objects, and functions

Let's first define these terms so we're on the same page. In this
style guide, **variables** are essentially column names, **objects**
are all data structures in R and ArcGIS (vectors, lists, data frames,
fields, tables), and **functions** are self-contained modules of code
that accomplish a specific task.

#### Variables in a dataset {#sec-variables-in-a-dataset}

This is where we differ from the [*tidyverse style
guide*](https://style.tidyverse.org/). Hadley recommends using only
lowercase letters, numbers, and `_` for all variables (column names
and R objects). However, we are defining variables as only column
names. For column names, we use UpperCamelCase and `_` to separate the
measurement name from the unit. Do not use special characters (i.e., write out `Percent` instead of using `%`).

This helps us mutate and pivot our data using the `_`:

``` r
results_long <- data |>
  dplyr::mutate(dplyr::across(dplyr::contains("_"), as.numeric)) |>
  tidyr::pivot_longer(
    cols = dplyr::matches("_|pH"),
    names_to = "measurement"
  ) 
```

**Variable examples:**

``` r
# Good
Clay_Percent
96HrMinC_MgCKgDay
PMN_MgKg

# Bad

# Uses special character
Clay_%

# Less human readable, inconsistent with style guide
96hrminc_mgkgday

# Hyphen will need to be escaped in R code to avoid error
PMN-MgKg
```

#### Objects and functions {#sec-objects-functions}

Objects names should be nouns and function names should be verbs
[@wickham2022]. Again, use lowercase letters, numbers, and
underscores. Do not put a number as the first character of the name.
Do not use hyphens. Do not use names of common functions or variables.

**Object examples**:

``` r
# Good
primary_color
data_2023

# Bad

# Less human readable, inconsistent with style guide
primarycolor

# Using a hyphen in an object name causes error
data-2023 <- read.csv("2023_data-clean.csv")
Error in data - 2023 <- read.csv("2023_data-clean.csv") : could not find function "-<-"
  
# Starting an object name with a number also causes error
2023_data <- read.csv("2023_data-clean.csv")
Error: unexpected input in "2023_"

# Overwrites R shortcut for TRUE
T <- FALSE

# Overwrites R function
c <- 10
```

**Function examples**:

``` r
# Good
add_row()
assign_quality_codes()

# Bad

# Uses noun instead of verb
row_adder() 

# Inconsistent with style guide
assignQualityCodes()

# Overwrites common base R function
mean()
```

## R Scripts

### Header template

Including a header in every R script helps standardize the metadata
elements provided at the beginning of your code and documents its
purpose. Dr. Timothy S Farewell wrote a great [blog
post](https://timfarewell.co.uk/my-r-script-header-template/) for
creating a template for the header of every R script. The following
template and instructions are adapted from his post [@farewell2018].

1.  **Script name**: meaningful and concise.
2.  **Purpose**: brief description of what the script aims to
    accomplish.
3.  **Author(s) and email**: it's good to know where the script
    originated from if there are any questions, comments, or
    improvements.
4.  **Date created**: this is automatically filled in from the
    template.
5.  **Notes**: free-text space for any thoughts or todos.

``` r
## ---------------------------
## Script name: check-crops.R
##
## Purpose: Cross reference sample requests, Field Maps forms, and management 
## surveys to get the correct crop planted at the time of sampling.
##
## Author: Jadey Ryan 
##
## Email: jryan@agr.wa.gov
##
## Date created: 2024-01-02
##
## Notes:
##   
## ---------------------------
    
# Attach packages ==============================================================

library(readxl)
library(writexl)
library(janitor)
library(dplyr)
library(tidyr)

# Load data ====================================================================
```

Add this template to RStudio using
[`snippets`](https://docs.posit.co/ide/user/ide/guide/productivity/snippets.html):

1.  Modify the below code with your name and preferred packages.
2.  In RStudio, go to `Tools` \> `Edit Code Snippets`.
3.  Scroll to the bottom of the R code snippets, and paste your
    modified code (the indent and tabs are important!).
4.  Click `Save` and close the window.
5.  Try it out by opening a new blank `.R` script, typing header, and
    then `Shift` + `Tab`.

``` r
snippet header
    ## Header ======================================================================
    ##
    ## Script name: 
    ##
    ## Purpose: 
    ##
    ## Author: Jadey Ryan 
    ##
    ## Email: jryan@agr.wa.gov
    ##
    ## Date created: `r paste(Sys.Date())`
    ##
    ## Notes:
    ##   
    
    # Attach packages ==============================================================

    library(readxl)
    library(writexl)
    library(janitor)
    library(dplyr)
    library(tidyr)
    
    # Load data ====================================================================
```

### Section template

The above header template also uses section breaks (commented lines
with `=` that break up the script into easily readable chunks).
Section breaks are fantastic tools in RStudio because they allow you
to easily show or hide blocks of code, see an outline of your script,
and navigate through the source file. Read more about code folding and
sections in this [Posit
article](https://support.posit.co/hc/en-us/articles/200484568-Code-Folding-and-Sections-in-the-RStudio-IDE).

The snippet to create this section template that fills in the rest of
the line with `=` was adapted from this [stack overflow
answer](https://stackoverflow.com/questions/32633920/dynamic-rstudio-code-snippet).

``` r
snippet end
    `r strrep("=", 84 - rstudioapi::primary_selection(rstudioapi::getActiveDocumentContext())$range$start[2])`
```

To create a new section with the heading "Tidy data", type in your
script:

`# Tidy data end<Shift+Tab>` which will result in:

```         
# Tidy data ====================================================================
```

![](images/sections.png){fig-alt="Screenshot of RStudio with boxes highlighting section functionality including collapsed code blocks, Jump To menu, and the document outline."}

## Code styling

Review the Syntax chapter of the [*tidyverse style
guide*](https://style.tidyverse.org/syntax.html) for a lengthy section
that covers spacing, function calls, long lines, semicolons,
assignments, comments, etc. Also skim through [Chapter 4 Workflow:
code style chapter of
*R4DS*](https://r4ds.hadley.nz/workflow-style.html), which highlights
the opinionated "most important parts of the tidyverse style guide".
Instead of rewriting all of these details and conventions into this
style guide and making us all memorize the content, we should all just
use the [{styler}](https://styler.r-lib.org/) (as advised in R4DS
Chapter 4).

{styler} is a package and RStudio Addin that will format your code for
you, so we can keep our coding style consistent across projects and
better facilitate collaboration. We'll deviate slightly from the
tidyverse style and instead use
[{grkstyle}](https://github.com/gadenbuie/grkstyle). {grkstyle} is an
extension package for {styler} that Garrick Aden-Buie developed based
on the tidyverse style guide. I prefer {grkstyle} over the tidyverse
style that {styler} defaults to mainly because of how it handles line
breaks in function calls.

The below example and installation instructions are pretty much copied
directly from Garrick's {grkstyle} README.

### Examples

#### grkstyle

```         
do_something_very_complicated(
    something = "that",
    requires = many,
    arguments = "some of which may be long"
) 
```

#### styler::tidyverse_style

```         
do_something_very_complicated(
  something = "that", requires = many,
  arguments = "some of which may be long"
) 
```

### Installation

Install {styler} and {grkstyle} with:

``` r
install.packages("styler")

options(repos = c(
    gadenbuie = "https://gadenbuie.r-universe.dev",
    getOption("repos")
))

# Download and install grkstyle in R
install.packages("grkstyle")
```

Set `grkstyle` as the default in {styler} functions and addins by
running

``` r
# Set default code style for {styler} functions
grkstyle::use_grk_style()
```

or adding the following to your `~/.Rprofile`

``` r
options(styler.addins_style_transformer = "grkstyle::grk_style_transformer()")
```

To edit your `.Rprofile`, you can use `usethis::edit_r_profile()` to
open the file in your RStudio.

### Usage

Once {styler} and {grkstyle} are installed, you can apply the style to
your `.R`, `.qmd`, and `.Rmd` files using the command palette,
keyboard shortcut, or addins menu.

#### Command palette

Use RStudio's **command palette** to quickly and easily access any
RStudio command and see keyboard shortcuts. Open the command palette
with `Cmd/Ctrl + Shift + P`, then type "styler" to see the shortcuts
offered by {styler}.

#### Keyboard shortcuts

I often use `Cmd/Ctrl + Shift + A` to style the entire active file
every time I finish a code block or section. To style just a
selection, use `Cmd/Ctrl + Alt + Shift + A`.

#### Addins menu

You can also use the Addins menu in RStudio to style your files by
clicking on a button to run the command.

![](images/styler.png){fig-alt="Screenshot of RStudio with the Addins menu open and boxes highlighting the styler functions."}
